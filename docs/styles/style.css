/* Themes */
/* Using variables allows me to create themes easily. */

/* The light theme includes "Saint Jerome Writing" by Caravaggio as the background image. It also includes Caravagio's other work, "Conversion on the Way to Dmascus." They are both excelent works of art. */
.theme-dark {
  --theme-background: rbga(22, 22, 22, 0.4);
  --theme-border: rgba(22, 22, 22, 0.2);
  --theme-header-background: rgba(22, 22, 22, 0.5);
  --theme-page-background: url('../images/Saint_Jerome_Writing-Caravaggio.jpg') center/cover no-repeat fixed;
  --theme-header-link-background: url("../images/Conversion_on_the_Way_to_Damascus-Caravaggio.jpg") center 20%/cover no-repeat fixed;
  --theme-header-link-background-position-y: -550px;
  --theme-text-color: white;
  --theme-button-background: rgba(51, 51, 51, 0.5);
  --theme-button-hover: rgba(85, 85, 85, 0.5);
  --theme-button-active: rgba(119, 119, 119, 0.5);
}

/* The light theme includes "The School of Athens" by Raphael as the background image. It also includes "Wanderer Above the Misty Fog" by Caspar David Friedrich. Both of which are beautiful works of art. */
.theme-light {
  --theme-background: rbga(255, 255, 255, 0.4);
  --theme-border: rgba(255, 255, 255, 0.2);
  --theme-header-background: rgba(222, 222, 222, 0.5);
  --theme-page-background: url('../images/The_School_of_Athens_by_Raphael.jfif') center/cover no-repeat fixed;
  --theme-header-link-background: url("../images/Wanderer_Above_the_Misty_Fog_by_Caspar_David_Friedrich.jpg") center 20%/cover no-repeat fixed;
  --theme-text-color: black;
  --theme-button-background: rgba(255, 255, 255, 0.2);
  --theme-button-hover: rgba(230, 230, 230, 0.4);
  --theme-button-active: rgba(204, 204, 204, 0.6);
}

.theme-grayscale {
  --theme-background: rbga(255, 255, 255, 0.4);
  --theme-border: rgba(255, 255, 255, 0.2);
  --theme-header-background: rgba(222, 222, 222, 0.5);
  --theme-page-background: #bfbfbf;
  --theme-header-link-background: #eee;
  --theme-text-color: black;
  --theme-button-background: rgba(128, 128, 128, 0.2);
  --theme-button-hover: rgba(160, 160, 160, 0.4);
  --theme-button-active: rgba(192, 192, 192, 0.6);
  filter: grayscale(100%); /* Apply grayscale filter to all content */

}

.theme-shadow {
  --theme-background: rbga(0, 0, 0, 0.5);
  --theme-border: rgba(222, 222, 222, 0.2);
  --theme-header-background: rgba(0, 0, 0, 0.5);
  --theme-page-background: #000;
  --theme-header-link-background: #111;
  --theme-text-color: #777;
  --theme-button-background: rgba(111, 111, 111, 0.2);
  --theme-button-hover: rgba(111, 111, 111, 0.4);
  --theme-button-active: rgba(111, 111, 111, 0.6);
}

/* This helps to ensure consistency, however, at the moment, my program is only optimized for chromium browsers */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif; /* This is a fefault font family, I didn't specifically choose out all the fonts. I saw a tutorial that used it and I thought it looked fine. */
}

/* This allows me to put a tiny empty space in places I need when I can't figure out how to change the size of the object without messing up something else. It is temporary and I am looking to remove this soon.  */
p#spacer-text {
  size: 2px;
  color: transparent;
}

/* This modifies the text in the header: "Bertrand's Portfolio." */
h1.title {
  color: var(--theme-text-color);
  margin: 30px;
  font-size: clamp(1.5rem, 2vw, 3rem);
}

/* I thought that the frosted effect looked nice, so I added it to almost everything as a common style, including the buttons. */
a {
  display: inline-block;
  text-decoration: none;
  text-align: center;
}

/* I also styled <a> tags to look like buttons, but this as had the inadvertent effect of messing with links elsewhere, I will fix that by either making those other buttons part of a group or the ones that I want here to be that way. Also, currently, the links in the header part of the notes and journal entries do not work because they rely on the same javascript calls to operate. I have not figured out how to make an exception for them. */
button, a, #themesButton {
  width: 100%;
  padding: 10px;
  margin: 5px;
  border: none;
  border-radius: 16px;
  background: var(--theme-button-background);
  backdrop-filter: blur(10px);
  color: var(--theme-text-color);
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.3s ease;
}

button:hover, a:hover, #themesButton:hover {
  background: var(--theme-button-hover);
  transform: scale(1.05);
}

button:active, a:hover, #themesButton:active {
  background: var(--theme-button-hover);
  transform: scale(0.95);
}

/* This is for theme selector button and dropdown */
#theme-selector {
  position: relative;
}

#themesButton {
  background: var(--theme-button-background);
  color: var(--theme-text-color);
}

#themesButton:hover {
  background: var(--theme-button-hover);
}

#themesButton:active {
  background: var(--theme-button-active);
}

.dropdown {
  display: none;
  position: absolute;
  top: 120%;
  left: 0;
  width: 100%;
  background: var(--theme-button-background);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  z-index: 1;
  overflow: hidden;
  max-height: 0;
}

.dropdown.show {
  display: block;
  max-height: 300px;
  overflow-y: auto;
}

button#themesButton {
  margin: 0;
}

.dropdown button {
  margin: 0;
  border-radius: 0;
  background: transparent;
}

.dropdown button:hover {
  transform: scale(1.15);
}

.dropdown button:first-child {
  border-top-left-radius: 16px;
  border-top-right-radius: 16px;
}

.dropdown button:last-child {
  border-bottom-left-radius: 16px;
  border-bottom-right-radius: 16px;
}

/* The the implementation of variables is clear where with the body being given a value according to the variables set. If I wanted to create a new theme now, it would be very easy. However, notably, I have noticed that my pages are loading slowly, and this I have noticed from only testing the site locally. I will need to make optimizations*/
body {
  height: 100%;
  display: flex;
  flex-direction: column;
  padding-top: var(--header-height);
  background: var(--theme-page-background);
}

header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  background: var(--theme-header-background);
  backdrop-filter: blur(10px);
  border-bottom: 1px solid var(--theme-border);    
  position: sticky;
  top: 0;
  height: 75px;
  z-index: 1000; /* This keeps the header above other content */
}

button.general-button {
  margin: 0;
}

.header-links {
  display: flex;
  gap: 1rem;
}

.gen-nav-menu {
  display: none;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: var(--theme-text-color);
}

.container {
  flex: 1;
  display: grid;
  grid-template-columns: 1fr clamp(350px, 50%, 100%) 1fr;
  gap: 1rem;
  padding: 1rem;
  margin-top: var(--header-height);
}

/* Since they are so similar, I can stule them all together. */
nav, main, aside {
  background: var(--theme-background);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  border: 1px solid var(--theme-border);
  padding: 20px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  color: var(--theme-text-color)
}

/* This keeps the sidebars right below the header even as the page moves.  */
nav, aside {
  position: sticky;
  top: 91px; /* This specific value makes it so that the sidebar is exactly below header. This is usually not good practice, and I will need to find a way to not use a specific value like this. */
  min-height: 400px;
  align-self: start;
  z-index: 1;
}

.card {
  overflow: hidden;
  border-radius: 16px;
  transition: border-radius 0.3s ease;
}

img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  position: absolute;
  top: 0;
  left: 0;
  transition: transform 0.3s ease;
}

.card-content {
  position: absolute;
  bottom: 10px;
  left: 10px;
  right: 10px;
  color: white;
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: transform 0.3s ease;
}

.card:hover img {
  transform: scale(1.1) translateY(-10px);
}

.card:hover .card-content {
  transform: translateY(-5px);
}

.card:hover h2 {
  transform: scale(1.1);
  transition: transform 0.6s ease;
}

.card:hover a {
  opacity: 1;
}

main {
  padding: 1rem;
  min-height: 80vh;
}

/* the footer has been designated to generally look a certain way regardless of the theme. */
footer {
  background: rgba(22, 22, 22, 0.5);
  backdrop-filter: blur(10px);
  color: white;
  padding: 1rem;
  min-height: 100px;
  margin-top: auto;
}

/* This organizes the links that are in the footer, and allows me to easily add more. */
div#footer-links {
  display: flex;
  flex-direction: row;
  justify-content: center;
}

aside .card-content a:hover {
  background: var(--theme-button-hover);
  transform: scale(1.05);
}

/* Horizontal stack of buttons in aside */
aside .card-content {
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* The following makes sure that the elmeents in the page don't overlap or become too squished. There are multiple to ensure this. I am not yet sure if there is a better way to do this. */
@media (max-width: 1200px) {
  .container {
    grid-template-columns: 1fr 1fr;
  }

  aside, nav {
      position: static;
  }

  aside { order: 1; }
  nav { order: 2; }
  main { order: 3; }

  aside, nav {
    grid-column: span 1;
  }

  main {
    grid-column: span 2;
  }
}

@media (max-width: 900px) {
  .gen-nav-menu {
      display: block;
  }

  .header-links {
      display: none;
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: var(--theme-header-link-background);
      background-position-y: var(--theme-header-link-background-position-y);
      backdrop-filter: blur(10px); /* Blur effect */
      padding: 1rem;
      flex-direction: column;
      z-index: 1000;      
  }

  .header-links.active {
      display: flex;
  }
}

@media (max-width: 600px) {
  .container {
      grid-template-columns: 1fr; /* Stacks everything */
      grid-template-rows: auto auto auto;
  }

  aside, nav, main {
      grid-column: span 1; /* Each takes full width */
  }
}
